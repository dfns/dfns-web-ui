/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EAlertVariant } from "./utils/enums/alerts-enums";
import { EButtonSize, EButtonVariant } from "./utils/enums/buttons-enums";
import { JSX } from "@stencil/core";
import { ITypo, ITypoColor } from "./utils/enums/typography-enums";
export { EAlertVariant } from "./utils/enums/alerts-enums";
export { EButtonSize, EButtonVariant } from "./utils/enums/buttons-enums";
export { JSX } from "@stencil/core";
export { ITypo, ITypoColor } from "./utils/enums/typography-enums";
export namespace Components {
    interface DfnsAlert {
        "classCss"?: string;
        "icon"?: string | null | false;
        "iconstyle"?: any;
        "variant": EAlertVariant;
    }
    interface DfnsButton {
        "classCss"?: string;
        "content": string;
        "disabled": boolean;
        "fullwidth": boolean;
        "icon"?: JSX.Element;
        "iconposition": "left" | "right";
        "iconstyle"?: any;
        "isloading": boolean;
        "sizing": EButtonSize;
        "type": "button" | "submit";
        "variant": EButtonVariant;
    }
    interface DfnsLayout {
        "bloomLogoSrc": string;
        "closeBtn"?: boolean;
        "closeBtnShouldDisconnect"?: boolean;
        "crossIconSrc": string;
        "molitorLogoSrc": string;
    }
    interface DfnsLoader {
        "LoaderIconSrc": string;
        "classCss"?: string;
    }
    interface DfnsStepper {
        "activeIndices": number[];
        "classCss"?: string;
        "icon"?: string;
        "iconstyle"?: string;
        "steps": string[];
    }
    interface DfnsTypography {
        "classCss"?: string;
        "color"?: ITypoColor;
        "typo": ITypo;
    }
    interface MyComponent {
    }
}
export interface DfnsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDfnsButtonElement;
}
declare global {
    interface HTMLDfnsAlertElement extends Components.DfnsAlert, HTMLStencilElement {
    }
    var HTMLDfnsAlertElement: {
        prototype: HTMLDfnsAlertElement;
        new (): HTMLDfnsAlertElement;
    };
    interface HTMLDfnsButtonElement extends Components.DfnsButton, HTMLStencilElement {
    }
    var HTMLDfnsButtonElement: {
        prototype: HTMLDfnsButtonElement;
        new (): HTMLDfnsButtonElement;
    };
    interface HTMLDfnsLayoutElement extends Components.DfnsLayout, HTMLStencilElement {
    }
    var HTMLDfnsLayoutElement: {
        prototype: HTMLDfnsLayoutElement;
        new (): HTMLDfnsLayoutElement;
    };
    interface HTMLDfnsLoaderElement extends Components.DfnsLoader, HTMLStencilElement {
    }
    var HTMLDfnsLoaderElement: {
        prototype: HTMLDfnsLoaderElement;
        new (): HTMLDfnsLoaderElement;
    };
    interface HTMLDfnsStepperElement extends Components.DfnsStepper, HTMLStencilElement {
    }
    var HTMLDfnsStepperElement: {
        prototype: HTMLDfnsStepperElement;
        new (): HTMLDfnsStepperElement;
    };
    interface HTMLDfnsTypographyElement extends Components.DfnsTypography, HTMLStencilElement {
    }
    var HTMLDfnsTypographyElement: {
        prototype: HTMLDfnsTypographyElement;
        new (): HTMLDfnsTypographyElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "dfns-alert": HTMLDfnsAlertElement;
        "dfns-button": HTMLDfnsButtonElement;
        "dfns-layout": HTMLDfnsLayoutElement;
        "dfns-loader": HTMLDfnsLoaderElement;
        "dfns-stepper": HTMLDfnsStepperElement;
        "dfns-typography": HTMLDfnsTypographyElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface DfnsAlert {
        "classCss"?: string;
        "icon"?: string | null | false;
        "iconstyle"?: any;
        "variant"?: EAlertVariant;
    }
    interface DfnsButton {
        "classCss"?: string;
        "content"?: string;
        "disabled"?: boolean;
        "fullwidth"?: boolean;
        "icon"?: JSX.Element;
        "iconposition"?: "left" | "right";
        "iconstyle"?: any;
        "isloading"?: boolean;
        "onButtonClick"?: (event: DfnsButtonCustomEvent<void>) => void;
        "sizing"?: EButtonSize;
        "type"?: "button" | "submit";
        "variant"?: EButtonVariant;
    }
    interface DfnsLayout {
        "bloomLogoSrc"?: string;
        "closeBtn"?: boolean;
        "closeBtnShouldDisconnect"?: boolean;
        "crossIconSrc"?: string;
        "molitorLogoSrc"?: string;
    }
    interface DfnsLoader {
        "LoaderIconSrc"?: string;
        "classCss"?: string;
    }
    interface DfnsStepper {
        "activeIndices"?: number[];
        "classCss"?: string;
        "icon"?: string;
        "iconstyle"?: string;
        "steps"?: string[];
    }
    interface DfnsTypography {
        "classCss"?: string;
        "color"?: ITypoColor;
        "typo"?: ITypo;
    }
    interface MyComponent {
    }
    interface IntrinsicElements {
        "dfns-alert": DfnsAlert;
        "dfns-button": DfnsButton;
        "dfns-layout": DfnsLayout;
        "dfns-loader": DfnsLoader;
        "dfns-stepper": DfnsStepper;
        "dfns-typography": DfnsTypography;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dfns-alert": LocalJSX.DfnsAlert & JSXBase.HTMLAttributes<HTMLDfnsAlertElement>;
            "dfns-button": LocalJSX.DfnsButton & JSXBase.HTMLAttributes<HTMLDfnsButtonElement>;
            "dfns-layout": LocalJSX.DfnsLayout & JSXBase.HTMLAttributes<HTMLDfnsLayoutElement>;
            "dfns-loader": LocalJSX.DfnsLoader & JSXBase.HTMLAttributes<HTMLDfnsLoaderElement>;
            "dfns-stepper": LocalJSX.DfnsStepper & JSXBase.HTMLAttributes<HTMLDfnsStepperElement>;
            "dfns-typography": LocalJSX.DfnsTypography & JSXBase.HTMLAttributes<HTMLDfnsTypographyElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
